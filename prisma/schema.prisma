// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Generated project model
model GeneratedProject {
  id          String   @id @default(cuid())
  name        String
  emoji       String
  description String
  sourceUrl   String   @default("#")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Project content sections
  overviewItems     String[]
  coreItems         String[]
  architectureItems String[]
  techItems         String[]
  techItemsJson     String?  @db.Text // Stores tech items with documentation URLs as JSON

  // Core documents
  indexDocument String? @db.Text
  designDocument String? @db.Text
  codeDocument  String? @db.Text
  techDocument  String? @db.Text
  initDocument  String? @db.Text

  // Tech documentation files stored as JSON
  techFilesJson String? @db.Text // JSON object with tech file names as keys and content as values

  // Enhanced agentic workflow documents
  instructionsDocument   String? @db.Text
  memoryIndexDocument    String? @db.Text
  memoryBankDocument     String? @db.Text
  promptArchitectDocument String? @db.Text
  promptDeveloperDocument String? @db.Text
  promptDesignerDocument  String? @db.Text
  promptEnterpriseDocument String? @db.Text
  architectureSampleDocument String? @db.Text
  deploymentDocument     String? @db.Text

  // Legacy document content (kept for backward compatibility)
  implementationDocument String? @db.Text
  comprehensiveDocument  String? @db.Text

  // User information (can be extended later with auth)
  userPrompt      String  @db.Text
  userIp          String?
  userFingerprint String?
}

// Job posting model for job search and application
model JobPosting {
  id          String    @id
  title       String
  company     String
  location    String
  type        String    // Remote, Hybrid, On-site
  description String    @db.Text
  url         String    @unique
  source      String    // Source of the job (HN, Wellfound, etc.)
  techs       String[]  // Technologies mentioned in job
  salary      String?   // Salary information if available
  crawledAt   DateTime  @default(now())
  processed   Boolean   @default(false)
  matches     Int?      // Match score with resume (0-100)
  
  // Relation to analysis
  analysis    JobAnalysis?
}

// Job analysis model containing AI-generated application materials
model JobAnalysis {
  id                String   @id
  coverLetter       String   @db.Text
  keyPoints         String[] // Key points to highlight in application
  questions         Json     // Array of question/answer pairs
  techFit           Int      // 0-100 tech stack match
  cultureFit        Int      // 0-100 culture fit
  roleFit           Int      // 0-100 role fit
  overallFit        Int      // 0-100 overall fit
  suggestedApproach String   @db.Text
  
  // Relation to job posting
  jobPosting        JobPosting @relation(fields: [id], references: [id], onDelete: Cascade)
}
