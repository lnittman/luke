import { Suspense } from 'react';
import { createAI, createStreamableUI } from 'ai/rsc';
import { ProjectLayout, LeftPanel, RightPanel } from '@/components/projects/generator/ProjectLayout';
import { StreamingDocumentViewer } from '@/components/projects/generator/StreamingDocumentViewer';
import { v4 as uuidv4 } from 'uuid';
import { DocumentType } from '@/lib/services/streamingDocumentService';

// These would typically come from a database or API
const mockProject = {
  id: 'project-123',
  name: 'TaskMaster',
  description: 'A productivity app for managing tasks and projects with a modern UI and real-time updates.',
  techStack: 'Next.js'
};

// Simulate document generation (in a real app, this would call the API)
async function simulateDocumentGeneration(documentTypes: DocumentType[]) {
  const ui = createStreamableUI();
  const documents: any[] = [];

  // Initial state
  ui.update({
    documents,
    isGenerating: true,
    message: 'Starting document generation...'
  });

  // Simulate document generation with delays
  for (const docType of documentTypes) {
    await new Promise(r => setTimeout(r, 1500)); // Simulate generation time
    
    const doc = {
      id: uuidv4(),
      title: `${mockProject.name} ${docType.charAt(0).toUpperCase() + docType.slice(1)}`,
      content: `# ${mockProject.name} ${docType.charAt(0).toUpperCase() + docType.slice(1)}\n\nThis is a sample document for the ${docType} documentation of ${mockProject.name}. In a real implementation, this would be generated by an AI model.`,
      type: docType,
      source: 'claude',
      isComplete: true,
      timestamp: new Date()
    };
    
    documents.push(doc);
    
    ui.update({
      documents: [...documents],
      isGenerating: true,
      message: `Generated ${docType} document. ${documents.length} completed.`
    });
  }
  
  // Final state
  ui.done({
    documents,
    isGenerating: false,
    message: `All ${documents.length} documents generated successfully.`
  });
  
  return ui.value;
}

// Create AI context provider
const { AI, getUI } = createAI({
  actions: {
    generateDocuments: async () => {
      const documentTypes = ['index', 'design', 'tech', 'code', 'init'] as DocumentType[];
      return simulateDocumentGeneration(documentTypes);
    }
  }
});

export default function StreamingProjectPage({ params }: { params: { id: string } }) {
  const projectId = params.id;
  
  return (
    <AI>
      <div className="min-h-screen bg-[rgb(var(--background))] text-[rgb(var(--foreground))]">
        <header className="border-b border-[rgb(var(--border))] p-4">
          <h1 className="text-2xl font-bold">{mockProject.name} - Streaming Documents</h1>
          <p className="text-[rgb(var(--muted))]">{mockProject.description}</p>
        </header>
        
        <ProjectLayout>
          <LeftPanel>
            <div className="p-4">
              <h2 className="text-lg font-bold mb-4">Project Details</h2>
              <div className="mb-4">
                <p className="text-sm font-medium text-[rgb(var(--muted))]">Name</p>
                <p>{mockProject.name}</p>
              </div>
              <div className="mb-4">
                <p className="text-sm font-medium text-[rgb(var(--muted))]">Tech Stack</p>
                <p>{mockProject.techStack}</p>
              </div>
              <div className="mb-6">
                <p className="text-sm font-medium text-[rgb(var(--muted))]">Description</p>
                <p className="text-sm">{mockProject.description}</p>
              </div>
              
              <GenerateButton />
            </div>
          </LeftPanel>
          
          <RightPanel>
            <Suspense fallback={<div className="p-4">Loading document viewer...</div>}>
              <DocumentsContainer />
            </Suspense>
          </RightPanel>
        </ProjectLayout>
      </div>
    </AI>
  );
}

// Client component for the generate button
'use client';
function GenerateButton() {
  const { generateDocuments } = AI.useActions();
  
  return (
    <button 
      onClick={() => generateDocuments()}
      className="w-full py-2 px-4 bg-blue-600 hover:bg-blue-700 text-white rounded-md transition-colors"
    >
      Generate Documents
    </button>
  );
}

// Server component that renders the documents
function DocumentsContainer() {
  const ui = getUI();
  
  return (
    <div className="h-full">
      <StreamingDocumentViewer streamState={ui} />
    </div>
  );
} 